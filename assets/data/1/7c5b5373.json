{"data":{"docs":{"id":"ea46b6ad90684fae46601a8f7a0dc8fe","title":"Contribution Guideline","content":"<h2 id=\"contribution-prerequisites\"><a href=\"#contribution-prerequisites\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contribution prerequisites</h2>\n<ul>\n<li>When you start on a task please mention that on issue</li>\n<li>Always base of your branch from latest <code class=\"language-text\">dev</code> branch</li>\n<li>Write tests for your code</li>\n<li>Always include issue number with a hash on your commit and pull request (e.g <code class=\"language-text\">#43</code>)</li>\n<li>Follow the coding style <a href=\"https://github.com/iluminar/goodwork/wiki/Contribution-Guideline#coding-style\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Style</a></li>\n</ul>\n<blockquote>\n<p><a href=\"https://dev.to/jmfayard/the-minimum-viable-pull-request-5e7p\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minimum Viable Pull Request</a></p>\n</blockquote>\n<h2 id=\"git-workflow\"><a href=\"#git-workflow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Git workflow</h2>\n<h3 id=\"first-time-setup\"><a href=\"#first-time-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>First time setup</h3>\n<p>[Fork the repo if you are outside collaborator.]</p>\n<ol>\n<li>Clone the project to your local pc</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@github.com:iluminar/goodwork.git</code></pre>\n<p>for outside collaborator</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@github.com:<span class=\"token punctuation\">{</span>yourusername<span class=\"token punctuation\">}</span>/goodwork.git</code></pre>\n<ol start=\"2\">\n<li>Configure remotes:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> goodwork\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:iluminar/goodwork.git</code></pre>\n<ol start=\"3\">\n<li>Setup application</li>\n</ol>\n<h4 id=\"using-docker\"><a href=\"#using-docker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using docker</h4>\n<blockquote>\n<p>Docker &#x26; Docker Compose must be installed</p>\n</blockquote>\n<p>a) Copy <code class=\"language-text\">.env</code> from <code class=\"language-text\">.env.example</code></p>\n<pre class=\"language-text\"><code class=\"language-text\">cp .env.example .env</code></pre>\n<p>b) Define environment variable</p>\n<p>Set app port, db credentials and mail driver credentials in <code class=\"language-text\">.env</code> file. Also provide <code class=\"language-text\">SSL_CERT_DOMAIN</code>(your domain) and <code class=\"language-text\">SSL_CERT_DIR</code>(directory of your ssl certificates file) values for ssl setup.(Not needed for local development)</p>\n<p>c) Run the installer</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x install.sh\n./install.sh local</code></pre>\n<blockquote>\n<p>To stop server: <code class=\"language-text\">./cmd stop</code> &#x26; to start server <code class=\"language-text\">./cmd start</code></p>\n</blockquote>\n<p>Login Credentials for Admin User\n<code class=\"language-text\">email: admin@example.com</code>\n<code class=\"language-text\">password: secret</code></p>\n<p><a href=\"https://github.com/iluminar/goodwork/wiki/Installation#shortcuts-for-running-command\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Useful Commands</a></p>\n<h4 id=\"install-manually\"><a href=\"#install-manually\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Manually</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout dev\n$ <span class=\"token function\">git</span> pull origin dev\n$ composer <span class=\"token function\">install</span>\n$ <span class=\"token function\">cp</span> .env.example .env\n$ php artisan key:generate\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<h3 id=\"regular-workflow\"><a href=\"#regular-workflow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regular workflow</h3>\n<ol>\n<li>Create a branch for new issue from <code class=\"language-text\">dev</code> branch latest commit (the branch name should be as “issue[number]”. E.g. – “issue7”):</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout -b issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span></code></pre>\n<ol start=\"2\">\n<li>Develop on issue[number] branch, but Do not merge the upstream master with your development branch!!</li>\n<li>Run test to ensure all tests are passed before commiting</li>\n<li>Commit changes to issue[number] branch:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token keyword\">.</span>\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"commit message\"</span></code></pre>\n<ol start=\"5\">\n<li>Push branch to Github:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push origin issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span></code></pre>\n<ol start=\"6\">\n<li>Repeat steps 2-5 till development is complete.</li>\n<li>Fetch upstream changes that were done by other contributors:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> fetch origin</code></pre>\n<ol start=\"8\">\n<li>Update local <code class=\"language-text\">dev</code> branch:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout dev\n$ <span class=\"token function\">git</span> pull origin dev</code></pre>\n<ol start=\"9\">\n<li>Rebase issue[number] branch on top of the upstream <code class=\"language-text\">dev</code>:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">git</span> rebase dev</code></pre>\n<ol start=\"10\">\n<li>In the process of the rebase, it may discover conflicts. In that case it will stop and allow you to fix the conflicts. After fixing conflicts,run all test to ensure nothing breaks and then just run:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token keyword\">.</span>\n$ <span class=\"token function\">git</span> rebase --continue</code></pre>\n<ol start=\"11\">\n<li>Push branch to GitHub (force changes to your issue branch, it is not a common branch). Rebasing means recreation of commits, so noway to push without force. NEVER force to common branch.:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push origin issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span> --force</code></pre>\n<ol start=\"12\">\n<li>Send a Pull Request.\nAttention: Please, recheck that in your pull request you send only your changes, and no other changes!!\nCheck it by command:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">diff</span> issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span> upstream/dev</code></pre>\n<ol start=\"13\">\n<li>Remove issue branch after successful pull request:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch -D issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">git</span> push origin :issue<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span></code></pre>\n<p><strong>N.B:</strong></p>\n<ul>\n<li>Never push to <code class=\"language-text\">master</code> or <code class=\"language-text\">dev</code> branch</li>\n<li>Work on <code class=\"language-text\">feature</code> branch</li>\n<li>Don't name your local working branch <code class=\"language-text\">feature</code>, rather give it name of your task id e.g <code class=\"language-text\">issue7</code></li>\n<li>Test before you push. Do not push half-done work.</li>\n<li>Create a pull request in <code class=\"language-text\">dev</code> branch</li>\n<li>Code will be reviewed by peers, if everything seems right then code will be merged</li>\n</ul>\n<h3 id=\"commit-and-messages\"><a href=\"#commit-and-messages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commit and messages</h3>\n<ul>\n<li>Commit message should be brief but descriptive enough to convey the message of what has been done in this commit, example</li>\n</ul>\n<blockquote>\n<p>Add delete user option in the dashboard</p>\n</blockquote>\n<p>Or like this</p>\n<blockquote>\n<p>Replace jQuery onReady listener with plain JS; fixes #13</p>\n<ul>\n<li>Add issue number in final commit message when the task is complete</li>\n</ul>\n</blockquote>\n<h2 id=\"coding-style\"><a href=\"#coding-style\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Coding style</h2>\n<p>Goodwork follows the <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PSR-2</a> coding standard and the <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PSR-4</a> autoloading standard and StandardJS style for Javascript file <a href=\"https://standardjs.com/rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StandardJS</a>.</p>\n<h2 id=\"changelog\"><a href=\"#changelog\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Changelog</h2>\n<p>Notable changes in source file should be recorded in <code class=\"language-text\">CHANGELOG.md</code> file.\nFormat of the record should be like below</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Version no. (Release date)</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> Change</span>\n<span class=\"token list punctuation\">-</span> Message [Issue no](Issue url)</code></pre>\n<p>Types of changes</p>\n<ul>\n<li><code class=\"language-text\">Added</code> for new features.</li>\n<li><code class=\"language-text\">Changed</code> for changes in existing functionality.</li>\n<li><code class=\"language-text\">Deprecated</code> for soon-to-be removed features.</li>\n<li><code class=\"language-text\">Removed</code> for now removed features.</li>\n<li><code class=\"language-text\">Fixed</code> for any bug fixes.</li>\n<li><code class=\"language-text\">Security</code> in case of vulnerabilities.</li>\n</ul>\n"}},"context":{}}